openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is A todo rest api that is built with go
    
  contact:
    email: kokp.amged@gmai.com
  version: 1.0.0
tags:
  - name: todos
    description: manage your todos
  - name: users
    description: manage users
  - name: auth
    description: manage authentication in the system
paths:
  /users:
    get:
      tags: 
        - users
      summary : list users
      description: to be able to list users you have to be authed and have sufficient permissions
      responses: 
        200:
          description: list of users
          content:
            application/json:
              schema: 
                type: array
                items: 
                   $ref : '#/components/schemas/User'
        401:
          description: unauthorized access 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error_code: 
                    type: string
                  error_message:
                    type: string
              example:   
                error_code: 1000
                error_message: you must be authed to access that resource 
                    
  /users/me:
    get:
      tags:
        - users
      summary: get users own info
      description: only accessible for authed users 
      operationId: getUserOwnInfo
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/User'
        '401':
          description: non authorized access as he is not authed
          
      security:
        - bearerAuth: []

  /users/{id}:
    get:
      tags:
        - users
      summary: get specific user info
      description: only accessible for auth users that have sufficient permissions
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: 'The ID needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
    # put :
    #   tags: 
    #     - users
    # delete :
    #   tags: 
    #     - users
    

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      example:
        id : 10
        username: theUser
        firstname: John
        lastname: James
        email: john@email.com
        phone: '12345'
        userStatus: 1
        

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT   
   